import com.android.build.gradle.tasks.PackageApplication
import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: 'com.android.application'
//apply plugin: 'com.github.dcendents.android-maven'  //for virtualjoystick
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def sdkDir = properties.getProperty('sdk.dir')
def ndkDir = properties.getProperty('ndk.dir')
def openCvDir = properties.getProperty('opencv.dir')
//def autodriveDir = properties.getProperty('autodrive.dir')
def sources = "AutodriveJavaFacade.cpp"
android {

    compileSdkVersion 27
    buildToolsVersion "27.0.2"
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 101
        versionName "1.0.1"
        applicationId "pegasus.bluetootharduino"
    }
    dependencies {
        testCompile 'junit:junit:4.12'
    }
    preBuild.doFirst {
        if (sdkDir == null) {
            throw new GradleException('"sdk.dir" not setup in local.properties')
        }

        if (ndkDir == null) {
            throw new GradleException('"ndk.dir" not setup in local.properties')
        }

        if (openCvDir == null) {
            throw new GradleException('"opencv.dir" not setup in local.properties')
        }
    }
    splits {
        abi {
            enable true // enable ABI split feature to create one APK per ABI
            universalApk true //generate an additional APK that targets all the ABIs
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] //disable automatic ndk-build call
    }
    // call regular ndk-build(.cmd) script from app directory, with generated makefile using $sources and $openCvDir variable
    task ndkBuild(type: Exec) {

        def makefile = new File("${project.projectDir}/src/main/jni/Android.mk")
        if(!makefile.exists()){
            String ANDROIDMK = "" +
                    "LOCAL_PATH := \$(call my-dir)\n" +
                    "LOCAL_ARM_NEON := true\n" +
                    "include \$(CLEAR_VARS)\n" +
                    "OPENCV_INSTALL_MODULES:=on\n" +
                    "OPENCV_LIB_TYPE:=SHARED\n" +
                    "OPENCV_CAMERA_MODULES:=on\n" +
                    "include $openCvDir\\sdk\\native\\jni\\OpenCV.mk\n" +
                    "LOCAL_MODULE := autodrive\n\n" +
                    "#traverse all the directory and subdirectory\n" +
                    "define walk\n" +
                    "\$(wildcard \$(1)) \$(foreach e, \$(wildcard \$(1)/*), \$(call walk, \$(e)))\n" +
                    "endef\n\n" +
                    "#find all the file recursively under jni\n" +
                    "ALLFILES = \$(call walk, \$(LOCAL_PATH)/Autodrive/src)\n" +
                    "FILE_LIST := \$(filter %.cpp, \$(ALLFILES))\n\n" +
                    "FILE_LIST2 := \$(wildcard \$(LOCAL_PATH)\\Autodrive\\src\\histogram\\*.cpp)\n" +
                    "LOCAL_SRC_FILES := \$(FILE_LIST:\$(LOCAL_PATH)/%=%)\n" +
                    "LOCAL_SRC_FILES += \$(FILE_LIST2)\n" +
                    "LOCAL_SRC_FILES += AutodriveJavaFacade.cpp\n\n" +
                    "LOCAL_SHARED_LIBRARIES += gnustl_shared\n\n" +
                    "# -v shows clang compiler debug information, hence useful for debugging compilation\n" +
                    "LOCAL_CFLAGS += -v\n" +
                    "LOCAL_LDLIBS += -llog -ldl -lstdc++\n" +
                    "LOCAL_C_INCLUDES += \$(LOCAL_PATH)\\Autodrive\\src\n" +
                    "LOCAL_C_INCLUDES += \$(LOCAL_PATH)\\Autodrive\\src\\imageprocessor\n" +
                    "LOCAL_C_INCLUDES += \$(LOCAL_PATH)\\Autodrive\\external\n" +
                    "include \$(BUILD_SHARED_LIBRARY)"
            makefile.write(ANDROIDMK)
        }

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine ndkDir + '/ndk-build.cmd', '-C', file('src/main').absolutePath
        } else {
            commandLine ndkDir + '/ndk-build', '-C', file('src/main').absolutePath
        }
    }

    signingConfigs {
        release {
            storeFile file("releasekey.jks")
            storePassword "password"
            keyAlias "releasekey"
            keyPassword "password"
        }
    }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }
}
dependencies {
    compile project(':openCVLibrary340')
    compile 'io.github.controlwear:virtualjoystick:1.10.1'
}
android.packagingOptions {
    exclude 'META-INF/notice.txt'
    exclude 'META-INF/license.txt'
    exclude 'libs/armeabi-v7a/libgnustl_shared.so'
}